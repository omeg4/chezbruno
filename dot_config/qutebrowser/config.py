# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}', 'https://accounts.google.com/*')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')
config.set('content.javascript.enabled', True, 'devtools://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', False, 'https://anon-v.com')
config.set('content.notifications.enabled', False, 'https://www.reddit.com')

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {
    'q': 'close',
    'qa': 'quit',
    'w': 'session-save',
    'wq': 'quit --save',
    'wqa': 'quit --save'
}

# My settings
config.set('tabs.background', True)

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['nvim', '-f', '{file}', '-c', 'normal {line}G{column0}l']

# CSS border value for hints.
# Type: String
c.hints.border = '1px solid #128FA3'

# Characters used for hint strings.
# Type: UniqueCharString
c.hints.chars = 'asdfghjkl'

# Minimum width (in pixels) of tabs (-1 for the default minimum size
# behavior). This setting only applies when tabs are horizontal. This
# setting does not apply to pinned tabs, unless `tabs.pinned.shrink` is
# False.
# Type: Int
c.tabs.min_width = -1

# Maximum width (in pixels) of tabs (-1 for no maximum). This setting
# only applies when tabs are horizontal. This setting does not apply to
# pinned tabs, unless `tabs.pinned.shrink` is False. This setting may
# not apply properly if max_width is smaller than the minimum size of
# tab contents, or smaller than tabs.min_width.
# Type: Int
c.tabs.max_width = 400

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = ['#DDDDDD', '#DDDDDD', '#DDDDDD']

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#061B3A'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#183150'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#DDDDDD'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #003041, stop:1 #00393D)'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = '#030A1A'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#030A1A'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#030A1A'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#616C99'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#07CD56'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#07CD56'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#D50F4A'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#DDDDDD'

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = '#616C99'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#030A1A'

# Color gradient start for download text.
# Type: QtColor
c.colors.downloads.start.fg = '#DDDDDD'

# Color gradient start for download backgrounds.
# Type: QtColor
c.colors.downloads.start.bg = '#004451'

# Color gradient end for download text.
# Type: QtColor
c.colors.downloads.stop.fg = '#DDDDDD'

# Color gradient stop for download backgrounds.
# Type: QtColor
c.colors.downloads.stop.bg = '#128FA3'

# Color gradient interpolation system for download text.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.downloads.system.fg = 'rgb'

# Color gradient interpolation system for download backgrounds.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.downloads.system.bg = 'rgb'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#DDDDDD'

# Background color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.bg = '#D50F4A'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#DDDDDD'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 174, 118, 0.8), stop:1 rgba(255, 46, 52, 0.8))'

# Font color for the matched part of hints.
# Type: QssColor
c.colors.hints.match.fg = '#0372A0'

# Text color for the keyhint widget.
# Type: QssColor
c.colors.keyhint.fg = '#DDDDDD'

# Highlight color for keys to complete the current keychain.
# Type: QssColor
c.colors.keyhint.suffix.fg = '#0372A0'

# Background color of the keyhint widget.
# Type: QssColor
c.colors.keyhint.bg = 'rgba(0, 0, 0, 80%)'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#DDDDDD'

# Background color of an error message.
# Type: QssColor
c.colors.messages.error.bg = '#D50F4A'

# Border color of an error message.
# Type: QssColor
c.colors.messages.error.border = '#FF2E34'

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = '#DDDDDD'

# Background color of a warning message.
# Type: QssColor
c.colors.messages.warning.bg = '#D50F4A'

# Border color of a warning message.
# Type: QssColor
c.colors.messages.warning.border = '#D50F4A'

# Foreground color of an info message.
# Type: QssColor
c.colors.messages.info.fg = '#DDDDDD'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#030A1A'

# Border color of an info message.
# Type: QssColor
c.colors.messages.info.border = '#333333'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#DDDDDD'

# Border used around UI elements in prompts.
# Type: String
c.colors.prompts.border = '0px'

# Background color for prompts.
# Type: QssColor
c.colors.prompts.bg = '#333333'

# Background color for the selected item in filename prompts.
# Type: QssColor
c.colors.prompts.selected.bg = 'grey'

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
# c.fonts.monospace = '"Source Code Pro", "xos4 Terminus", Terminus, Monospace, "DejaVu Sans Mono", Monaco, "Bitstream Vera Sans Mono", "Andale Mono", "Courier New", Courier, "Liberation Mono", monospace, Fixed, Consolas, Terminal'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '14pt sans-serif'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '14pt monospace'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs.selected = '14pt monospace'
c.fonts.tabs.unselected = '14pt monospace'

c.fonts.hints = '14pt monospace'

# Font family for cursive fonts.
# Type: FontFamily
# c.fonts.web.family.cursive = None

# This setting can be used to map keys to other keys. When the key used
# as dictionary-key is pressed, the binding for the key used as
# dictionary-value is invoked instead. This is useful for global
# remappings of keys, for example to map Ctrl-[ to Escape. Note that
# when a key is bound (via `bindings.default` or `bindings.commands`),
# the mapping is ignored.
# Type: Dict
c.bindings.key_mappings = {
    '<Ctrl+6>': '<Ctrl+^>',
    '<Ctrl+Enter>': '<Ctrl+Return>',
    '<Ctrl+[>': '<Escape>',
    '<Ctrl+j>': '<Return>',
    '<Ctrl+m>': '<Return>',
    '<Enter>': '<Return>',
    '<Shift+Enter>': '<Return>',
    '<Shift+Return>': '<Return>'
}

# Bindings for normal mode
config.bind(
    ',v',
    'spawn mpv {url}'
)
config.bind(
    ';V',
    'hint --rapid links userscript mpv-pl'
)

config.bind(
    ',p',
    # 'spawn -ov youtube-dl --restrict-filenames --newline --no-mtime -f "bestvideo[ext=mp4]/best" -o /mnt/sgext/stuff/{title} {url}'
    'hint --rapid links userscript /home/bruno/.config/qutebrowser/userscripts/phdlv2.sh'
)

config.bind(
    ',P',
    'hint --rapid links userscript /home/bruno/.config/qutebrowser/userscripts/phdl-force.sh'
)

# config.bind(
#     ',o',
#     'hint --rapid links userscript /home/bruno/.config/qutebrowser/userscripts/phdlv2.sh'
# )

config.bind(
    ',g',
    'hint --rapid links userscript /home/bruno/.config/qutebrowser/userscripts/phgif.sh'
)

config.bind(
    ',b',
    'hint --rapid links userscript /home/bruno/.config/qutebrowser/userscripts/mphv.sh'
)

config.bind(
    ',l',
    'spawn --userscript /home/bruno/.config/qutebrowser/userscripts/phdlv2.sh'
)

config.bind(
    ',L',
    'spawn --userscript /home/bruno/.config/qutebrowser/userscripts/phdl-force.sh'
)

config.bind(
    ',r',
    'hint --rapid links userscript /home/bruno/.config/qutebrowser/userscripts/ripme.sh'
)

config.bind(
    ';D',
    'hint --rapid links download'
)

config.bind(
    ',k',
    'spawn --userscript /home/bruno/.config/qutebrowser/userscripts/testout.sh'
)

config.set('downloads.remove_finished', 1000)

config.set('content.autoplay', False, 'http://*')
config.set('content.autoplay', False, 'https://*')

config.set('downloads.location.directory', '/mnt/sgext/stuff/')
# config.set('downloads.location.suggestion', 'both')
config.set('prompt.filebrowser', False)
